# -*- coding: utf-8 -*-
"""Credit_Card_Fraud_Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RzltWwZ959b_wM3qCUXpeT0VVNdyDd58

# Importing all the necessary Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib import gridspec
from google.colab import files
uploaded = files.upload()

"""#Loading the Data"""

data = pd.read_csv("creditcard.csv")

"""#Understanding the Data"""

data.head()

"""#Describing the Data"""

print(data.shape)
print(data.describe())

"""#Imbalance in the data"""

fraud = data[data['Class'] == 1]
valid = data[data['Class'] == 0]
outlierFraction = len(fraud)/float(len(valid))
print(outlierFraction)
print('Fraud Cases: {}'.format(len(data[data['Class'] == 1])))
print('Valid Transactions: {}'.format(len(data[data['Class'] == 0])))

"""#Print the amount details for Fraudulent Transaction"""

print("Amount details of the fraudulent transaction")
fraud.Amount.describe()

"""# Print the amount details for Normal Transaction"""

print("details of valid transaction")
valid.Amount.describe()

"""#Plotting the Correlation Matrix"""

corrmat = data.corr()
fig = plt.figure(figsize = (12, 9))
sns.heatmap(corrmat, vmax = .8, square = True)
plt.show()

"""#Separating the X and the Y values"""

# dividing the X and the Y from the dataset
X = data.drop(['Class'], axis = 1)
Y = data["Class"]
print(X.shape)
print(Y.shape)
# getting just the values for the sake of processing
# (its a numpy array with no columns)
xData = X.values
yData = Y.values

"""#Training and Testing Data Bifurcation"""

# Using Scikit-learn to split data into training and testing sets
from sklearn.model_selection import train_test_split
# Split the data into training and testing sets
xTrain, xTest, yTrain, yTest = train_test_split(
        xData, yData, test_size = 0.2, random_state = 42)

"""#Building a Random Forest Model using scikit learn"""

# Building the Random Forest Classifier (RANDOM FOREST)
from sklearn.ensemble import RandomForestClassifier
# random forest model creation
rfc = RandomForestClassifier()
rfc.fit(xTrain, yTrain)
# predictions
yPred = rfc.predict(xTest)

"""# Building all kinds of evaluating parameters"""

# Evaluating the classifier

from sklearn.metrics import classification_report, accuracy_score
from sklearn.metrics import precision_score, recall_score
from sklearn.metrics import f1_score, matthews_corrcoef
from sklearn.metrics import confusion_matrix

n_outliers = len(fraud)
n_errors = (yPred != yTest).sum()
print("The model used is Random Forest classifier")

acc = accuracy_score(yTest, yPred)
print("The accuracy is {}".format(acc))

prec = precision_score(yTest, yPred)
print("The precision is {}".format(prec))

rec = recall_score(yTest, yPred)
print("The recall is {}".format(rec))

f1 = f1_score(yTest, yPred)
print("The F1-Score is {}".format(f1))

MCC = matthews_corrcoef(yTest, yPred)
print("The Matthews correlation coefficient is{}".format(MCC))

"""## **Prediction on a new transaction**"""

# Example: Predict on a new transaction

new_transaction = np.array([[0.0, -1.35980713, -0.07278117, 2.53634674, 1.37815522,
                             -0.33832077, 0.46238778, 0.23959855, 0.0986979, 0.36378697,
                             0.09079417, -0.55159953, -0.61780086, -0.99138985, -0.31116935,
                             1.46817697, -0.47040053, 0.20797124, 0.02579058, 0.40399296,
                             0.2514121, -0.01830678, 0.27783757, -0.11047391, 0.06692808,
                             0.12853936, -0.18911484, 0.13355838, -0.02105305, 149.62]])  # <-- Amount is last

prediction = rfc.predict(new_transaction)
print("Prediction:", "Fraud" if prediction[0] == 1 else "Not Fraud")

"""#Visualizing the Confusion Matrix"""

# printing the confusion matrix
LABELS = ['Normal', 'Fraud']
conf_matrix = confusion_matrix(yTest, yPred)
plt.figure(figsize =(12, 12))
sns.heatmap(conf_matrix, xticklabels = LABELS,
            yticklabels = LABELS, annot = True, fmt ="d");
plt.title("Confusion matrix")
plt.ylabel('True class')
plt.xlabel('Predicted class')
plt.show()